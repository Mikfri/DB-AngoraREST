// <auto-generated />
using System;
using DB_AngoraLib.EF_DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DB_AngoraREST.Migrations
{
    [DbContext(typeof(DB_AngoraContext))]
    [Migration("20240502125259_DbAngMig01")]
    partial class DbAngMig01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DB_AngoraLib.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RabbitLeftEarId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RabbitRightEarId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RabbitRightEarId", "RabbitLeftEarId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Rabbit", b =>
                {
                    b.Property<string>("RightEarId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LeftEarId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("ApprovedRaceColorCombination")
                        .HasColumnType("bit");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DateOfDeath")
                        .HasColumnType("date");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int?>("IsPublic")
                        .HasColumnType("int");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Race")
                        .HasColumnType("int");

                    b.HasKey("RightEarId", "LeftEarId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Rabbits");

                    b.HasData(
                        new
                        {
                            RightEarId = "5095",
                            LeftEarId = "002",
                            Color = 16,
                            DateOfBirth = new DateOnly(2020, 6, 12),
                            DateOfDeath = new DateOnly(2022, 7, 22),
                            Gender = 0,
                            IsPublic = 0,
                            NickName = "Sov",
                            OwnerId = "5095",
                            Race = 0
                        },
                        new
                        {
                            RightEarId = "5095",
                            LeftEarId = "001",
                            Color = 18,
                            DateOfBirth = new DateOnly(2019, 2, 27),
                            DateOfDeath = new DateOnly(2024, 4, 13),
                            Gender = 0,
                            IsPublic = 0,
                            NickName = "Kaliba",
                            OwnerId = "5095",
                            Race = 0
                        },
                        new
                        {
                            RightEarId = "5095",
                            LeftEarId = "003",
                            Color = 26,
                            DateOfBirth = new DateOnly(2020, 3, 12),
                            DateOfDeath = new DateOnly(2023, 11, 3),
                            Gender = 0,
                            IsPublic = 0,
                            NickName = "Smørklat Smør",
                            OwnerId = "5095",
                            Race = 0
                        },
                        new
                        {
                            RightEarId = "4640",
                            LeftEarId = "120",
                            Color = 16,
                            DateOfBirth = new DateOnly(2021, 5, 11),
                            DateOfDeath = new DateOnly(2023, 11, 3),
                            Gender = 0,
                            IsPublic = 0,
                            NickName = "Mulan",
                            OwnerId = "5095",
                            Race = 0
                        },
                        new
                        {
                            RightEarId = "4640",
                            LeftEarId = "105",
                            Color = 13,
                            DateOfBirth = new DateOnly(2021, 4, 5),
                            Gender = 1,
                            IsPublic = 0,
                            NickName = "Ingolf",
                            OwnerId = "5095",
                            Race = 0
                        },
                        new
                        {
                            RightEarId = "4398",
                            LeftEarId = "3020",
                            Color = 26,
                            DateOfBirth = new DateOnly(2022, 7, 22),
                            Gender = 1,
                            IsPublic = 0,
                            NickName = "Douglas",
                            OwnerId = "5053",
                            Race = 10
                        },
                        new
                        {
                            RightEarId = "5053",
                            LeftEarId = "0223",
                            Color = 16,
                            DateOfBirth = new DateOnly(2023, 5, 30),
                            Gender = 0,
                            IsPublic = 0,
                            NickName = "Chinchou",
                            OwnerId = "5053",
                            Race = 17
                        },
                        new
                        {
                            RightEarId = "5053",
                            LeftEarId = "0723",
                            Color = 21,
                            DateOfBirth = new DateOnly(2024, 10, 15),
                            Gender = 1,
                            IsPublic = 0,
                            NickName = "Sandshrew",
                            OwnerId = "5053",
                            Race = 17
                        },
                        new
                        {
                            RightEarId = "5053",
                            LeftEarId = "1023",
                            Color = 21,
                            DateOfBirth = new DateOnly(2024, 10, 15),
                            Gender = 0,
                            IsPublic = 0,
                            NickName = "Marabou",
                            OwnerId = "5053",
                            Race = 17
                        },
                        new
                        {
                            RightEarId = "M63",
                            LeftEarId = "2104",
                            Color = 30,
                            DateOfBirth = new DateOnly(2023, 5, 22),
                            Gender = 0,
                            IsPublic = 0,
                            NickName = "Ortovi",
                            OwnerId = "5053",
                            Race = 17
                        },
                        new
                        {
                            RightEarId = "5053",
                            LeftEarId = "0823",
                            Color = 25,
                            DateOfBirth = new DateOnly(2024, 10, 15),
                            Gender = 0,
                            IsPublic = 0,
                            NickName = "Pepsi",
                            OwnerId = "5053",
                            Race = 17
                        },
                        new
                        {
                            RightEarId = "5053",
                            LeftEarId = "0923",
                            Color = 25,
                            DateOfBirth = new DateOnly(2024, 10, 15),
                            DateOfDeath = new DateOnly(2024, 3, 14),
                            Gender = 1,
                            IsPublic = 0,
                            NickName = "Cola",
                            OwnerId = "5053",
                            Race = 17
                        },
                        new
                        {
                            RightEarId = "5053",
                            LeftEarId = "0623",
                            Color = 19,
                            DateOfBirth = new DateOnly(2023, 8, 17),
                            Gender = 0,
                            IsPublic = 0,
                            NickName = "Karla",
                            OwnerId = "5053",
                            Race = 17
                        },
                        new
                        {
                            RightEarId = "M63",
                            LeftEarId = "3102",
                            Color = 19,
                            DateOfBirth = new DateOnly(2023, 9, 23),
                            Gender = 0,
                            IsPublic = 0,
                            NickName = "Xådda",
                            OwnerId = "5053",
                            Race = 17
                        },
                        new
                        {
                            RightEarId = "4977",
                            LeftEarId = "206",
                            Color = 15,
                            DateOfBirth = new DateOnly(2022, 2, 2),
                            Gender = 1,
                            IsPublic = 0,
                            NickName = "Dario",
                            OwnerId = "5053",
                            Race = 17
                        },
                        new
                        {
                            RightEarId = "4977",
                            LeftEarId = "315",
                            Color = 15,
                            DateOfBirth = new DateOnly(2023, 1, 13),
                            Gender = 0,
                            IsPublic = 0,
                            NickName = "Miranda",
                            OwnerId = "5053",
                            Race = 17
                        },
                        new
                        {
                            RightEarId = "5053",
                            LeftEarId = "0423",
                            Color = 15,
                            DateOfBirth = new DateOnly(2023, 5, 30),
                            Gender = 0,
                            IsPublic = 0,
                            NickName = "Gastly",
                            OwnerId = "5053",
                            Race = 17
                        },
                        new
                        {
                            RightEarId = "V23",
                            LeftEarId = "023",
                            Color = 4,
                            DateOfBirth = new DateOnly(2020, 4, 10),
                            DateOfDeath = new DateOnly(2024, 4, 23),
                            Gender = 1,
                            IsPublic = 0,
                            NickName = "Aslan",
                            OwnerId = "5053",
                            Race = 17
                        },
                        new
                        {
                            RightEarId = "4977",
                            LeftEarId = "213",
                            Color = 6,
                            DateOfBirth = new DateOnly(2022, 3, 24),
                            Gender = 0,
                            IsPublic = 0,
                            NickName = "Frida",
                            OwnerId = "5053",
                            Race = 17
                        });
                });

            modelBuilder.Entity("DB_AngoraLib.Models.RabbitParents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChildLeftEarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChildRightEarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherLeftEarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FatherRightEarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MotherLeftEarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MotherRightEarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RabbitChildLeftEarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RabbitChildRightEarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FatherRightEarId", "FatherLeftEarId");

                    b.HasIndex("MotherRightEarId", "MotherLeftEarId");

                    b.HasIndex("RabbitChildRightEarId", "RabbitChildLeftEarId");

                    b.ToTable("RabbitParents");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BodyNotice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BodyPoint")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateRated")
                        .HasColumnType("date");

                    b.Property<string>("FurNotice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FurPoint")
                        .HasColumnType("int");

                    b.Property<string>("LeftEarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RightEarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TotalPoint")
                        .HasColumnType("int");

                    b.Property<string>("WeightNotice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WeightPoint")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RightEarId", "LeftEarId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RoadNameAndNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5095",
                            AccessFailedCount = 0,
                            City = "Kirke Såby",
                            ConcurrencyStamp = "412e0ac1-c6a8-4a3d-8966-6afe7aa9ec28",
                            Email = "IdaFribor87@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ida",
                            IsAdmin = true,
                            LastName = "Friborg",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEM+w4FIfD/YOwnbGlTs2d92NrQRTdWhp7+hVU5P3NQeA+S3DS4QovgwrgjqHxjsprg==",
                            PhoneNumber = "27586455",
                            PhoneNumberConfirmed = false,
                            RoadNameAndNo = "Fynsvej 14",
                            SecurityStamp = "b0648f8f-cfc7-46a4-a3c8-9361312229f9",
                            TwoFactorEnabled = false,
                            ZipCode = 4060
                        },
                        new
                        {
                            Id = "5053",
                            AccessFailedCount = 0,
                            City = "Benløse",
                            ConcurrencyStamp = "562200cc-3561-4065-9a0b-1d67eedfed05",
                            Email = "MajaJoensen89@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Maja",
                            IsAdmin = false,
                            LastName = "Hulstrøm",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGQuyYe6f7chvubR9A75SurPrJhRKgihyjzDLX1+WqBE5VM/+2LtnUF+Aa/cRTmc8w==",
                            PhoneNumber = "28733085",
                            PhoneNumberConfirmed = false,
                            RoadNameAndNo = "Sletten 4",
                            SecurityStamp = "039c721e-82da-4687-be75-549217d258db",
                            TwoFactorEnabled = false,
                            ZipCode = 4100
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Photo", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.Rabbit", null)
                        .WithMany("Photos")
                        .HasForeignKey("RabbitRightEarId", "RabbitLeftEarId");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Rabbit", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.User", "User")
                        .WithMany("Rabbits")
                        .HasForeignKey("OwnerId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.RabbitParents", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.Rabbit", "RabbitFather")
                        .WithMany("FatheredChildren")
                        .HasForeignKey("FatherRightEarId", "FatherLeftEarId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DB_AngoraLib.Models.Rabbit", "RabbitMother")
                        .WithMany("MotheredChildren")
                        .HasForeignKey("MotherRightEarId", "MotherLeftEarId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DB_AngoraLib.Models.Rabbit", "RabbitChild")
                        .WithMany("Parents")
                        .HasForeignKey("RabbitChildRightEarId", "RabbitChildLeftEarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RabbitChild");

                    b.Navigation("RabbitFather");

                    b.Navigation("RabbitMother");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Rating", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.Rabbit", "Rabbit")
                        .WithMany("Ratings")
                        .HasForeignKey("RightEarId", "LeftEarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rabbit");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB_AngoraLib.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Rabbit", b =>
                {
                    b.Navigation("FatheredChildren");

                    b.Navigation("MotheredChildren");

                    b.Navigation("Parents");

                    b.Navigation("Photos");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.User", b =>
                {
                    b.Navigation("Rabbits");
                });
#pragma warning restore 612, 618
        }
    }
}
